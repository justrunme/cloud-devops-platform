name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-and-format:
    name: Validate and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Or a version that suits your needs

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform

  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: validate-and-format

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Or a version that suits your needs

      - name: Terraform Init (Step 1)
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply Kind Cluster
        run: terraform apply -auto-approve -target=kind_cluster.default -target=local_file.kubeconfig
        working-directory: ./terraform

      - name: Verify Kubeconfig Exists
        run: |
          ls -lah ./terraform
          cat ./terraform/kubeconfig || echo "no kubeconfig found"

      - name: Debug Kubernetes Context
        run: |
          export KUBECONFIG=${{ github.workspace }}/terraform/kubeconfig
          kubectl config get-contexts
          kubectl get nodes

      - name: Проверка Kubernetes
        run: |
          export KUBECONFIG=${{ github.workspace }}/terraform/kubeconfig
          kubectl get nodes
          kubectl get pods -A

      - name: Terraform Apply (install ArgoCD only)
        run: terraform apply -auto-approve -target=helm_release.argocd
        working-directory: ./terraform
        env:
          KUBECONFIG: ${{ github.workspace }}/terraform/kubeconfig

      - name: Wait for ArgoCD CRDs to be available
        run: |
          export KUBECONFIG=${{ github.workspace }}/terraform/kubeconfig
          for i in {1..30}; do
            kubectl get crd applications.argoproj.io && break
            echo "Waiting for Application CRD..."
            sleep 5
          done

      - name: Terraform Apply full (Application and monitoring)
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          KUBECONFIG: ${{ github.workspace }}/terraform/kubeconfig

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.52.2_Linux-64bit.deb

      - name: Run Trivy Vulnerability Scan in Cluster
        env:
          KUBECONFIG: ${{ github.workspace }}/terraform/kubeconfig
        run: |
          CURRENT_CONTEXT=$(kubectl config current-context)
          trivy k8s --report summary --context "$CURRENT_CONTEXT" cluster

      - name: Run kube-bench
        env:
          KUBECONFIG: ${{ github.workspace }}/terraform/kubeconfig
        run: |
          kubectl apply -f security/kube-bench-config.yaml
          kubectl wait --for=condition=complete job/kube-bench --timeout=5m
          kubectl logs job/kube-bench > kube-bench-results.txt
          cat kube-bench-results.txt

      - name: Install Kubescape
        run: | 
          curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash

      - name: Run Kubescape Scan
        env:
          KUBECONFIG: ${{ github.workspace }}/terraform/kubeconfig
        run: |
          kubescape scan --kubecontext cloud-devops-platform --format pretty --output SECURITY-REPORT.md
          cat SECURITY-REPORT.md