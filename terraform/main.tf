terraform {
  required_providers {
    kind = {
      source  = "tehcyx/kind"
      version = "0.0.13"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.20"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.9"
    }
  }
}

resource "kind_cluster" "default" {
  name           = "cloud-devops-platform"
  wait_for_ready = true

  kind_config {
    kind        = "Cluster"
    api_version = "kind.x-k8s.io/v1alpha4"

    node {
      role = "control-plane"
      extra_port_mappings {
        container_port = 30000
        host_port      = 80
        protocol       = "TCP"
      }
      extra_port_mappings {
        container_port = 30001
        host_port      = 443
        protocol       = "TCP"
      }
    }
    node {
      role = "worker"
    }
  }
}

# The providers will use the kubeconfig generated by the kind_cluster resource
provider "kubernetes" {
  config_path = kind_cluster.default.kubeconfig
}

provider "helm" {
  kubernetes {
    config_path = kind_cluster.default.kubeconfig
  }
}

# 1. Install ArgoCD
resource "helm_release" "argocd" {
  name       = "argocd"
  repository = "https://argoproj.github.io/argo-helm"
  chart      = "argo-cd"
  namespace  = "argocd"
  version    = "5.51.4"

  create_namespace = true
  skip_crds        = true # Keep this as CRDs might already exist from previous runs or be managed by ArgoCD itself

  values = [
    templatefile("${path.module}/argocd-values.yaml", {})
  ]
}

# 2. Install Prometheus
resource "helm_release" "prometheus" {
  name       = "prometheus"
  repository = "https://prometheus-community.github.io/helm-charts"
  chart      = "prometheus"
  namespace  = "monitoring"
  version    = "25.18.0"

  create_namespace = true

  values = [
    templatefile("${path.module}/../monitoring/prometheus-values.yaml", {})
  ]
}

# 3. Install Grafana
resource "helm_release" "grafana" {
  name       = "grafana"
  repository = "https://grafana.github.io/helm-charts"
  chart      = "grafana"
  namespace  = "monitoring"
  version    = "7.3.11"

  create_namespace = true

  values = [
    templatefile("${path.module}/../monitoring/grafana-values.yaml", {})
  ]
}

# 4. Create Grafana Dashboards ConfigMap
resource "kubernetes_config_map" "grafana_dashboards" {
  metadata {
    name      = "grafana-dashboards"
    namespace = "monitoring"
    labels = {
      grafana_dashboard = "1"
    }
  }

  data = {
    "k8s-cluster-overview.json" = file("${path.module}/../monitoring/grafana-dashboards/k8s-cluster-overview.json")
  }
}